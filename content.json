{"meta":{"title":"Gwang's blog","subtitle":"Front-end Developer Gwang's Blog","description":null,"author":"gwang","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"JSX 사용하기","slug":"react-jsx","date":"2017-05-22T10:39:26.000Z","updated":"2017-05-22T12:29:16.000Z","comments":true,"path":"2017/05/22/react-jsx/","link":"","permalink":"http://yoursite.com/2017/05/22/react-jsx/","excerpt":"","text":"JSX란? JSX란? Javascript와 xml의 합성어로 jsx라는 이름이 생겼다. 기존의 XML을 허용하기 위해서 사용하는 Javascript 확장 문법이다. JSX의 특징 빠르다. (컴파일 되면서 최적화가 되기 때문에) 익숙하다. (XML이나 HTML에 익숙하면 금방 JSX를 익힐 수 있다.) 의미를 잘 나타낸다. (Javascript 코드를 마크업 형태로 만들 수 있다.) 코드가 읽기 쉽고 간결해 진다. 서로 다른 Javascript를 사용해도 같은 JSX를 지원할 수 있다. (transfiler를 사용하기 때문에) 12345// jsx를 쓰지 않을 경우React.createElement('div', &#123;class: wrapper&#125;);// jsx 문법&lt;div class=\"wrapper\"&gt;&lt;/div&gt; JSX의 문법1. return 요소 내부에는 하나의 element로 wrapping 되어야 한다.12345678910// 오류// return 하는 element는 하나의 element로 감싸여 있어야 한다.class App extends React.Component &#123; render()&#123; return( &lt;h1&gt;Hello, React&lt;/h1&gt; &lt;p&gt;My first Component&lt;/p&gt; ); &#125;&#125; 1234567891011// 정상작동 class App extends React.Component &#123; render()&#123; return( &lt;div&gt; &lt;h1&gt;Hello, React&lt;/h1&gt; &lt;p&gt;My first Component&lt;/p&gt; &lt;/div&gt; ); &#125;&#125; 2. Javascript 표현시에는 {}안에 Javascript 표현식을 넣는다.12345678910111213class App extends React.Component &#123; render()&#123; let msg = \"My first Component\"; return( &lt;div&gt; &lt;h1&gt;Hello, React&lt;/h1&gt; &lt;p&gt;&#123;msg&#125;&lt;/p&gt; &lt;p&gt;&#123; msg ? 'true' : 'false'&#125;&lt;/p&gt; &lt;p&gt;&#123;/* comment */&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125; if ~ else 같은 경우는 사용 불가능 하기 때문에 삼항 연산자를 써야한다.comment 작성시에는 {/* comment */} 형식으로 써야 한다.comment 또한 하나의 element로 wrapping 되어야 한다. 3. inline 스타일을 적용하는 경우에는 key가 camelCase인 json 형식의 변수가 사용된다.123456789101112131415161718class App extends React.Component &#123; render()&#123; let msg = \"My first Component\"; let style = &#123; fontSize : '20px', backgroundColor: '#181818', borderRadius: '10px', &#125; return( &lt;div&gt; &lt;h1 style=&#123;style&#125;&gt;Hello, React&lt;/h1&gt; &lt;p&gt;&#123;msg&#125;&lt;/p&gt; &lt;p&gt;&#123; msg ? 'true' : 'false'&#125;&lt;/p&gt; &lt;p&gt;&#123;/* comment */&#125;&lt;/p&gt; &lt;/div&gt; ); &#125;&#125;","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"},{"name":"React.js","slug":"Javascript/React-js","permalink":"http://yoursite.com/categories/Javascript/React-js/"},{"name":"JSX","slug":"Javascript/React-js/JSX","permalink":"http://yoursite.com/categories/Javascript/React-js/JSX/"}],"tags":[{"name":"react.js","slug":"react-js","permalink":"http://yoursite.com/tags/react-js/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"},{"name":"jsx","slug":"jsx","permalink":"http://yoursite.com/tags/jsx/"}]},{"title":"React.js 개발환경 설정","slug":"react-setting","date":"2017-05-18T08:15:22.000Z","updated":"2017-05-18T11:00:57.000Z","comments":true,"path":"2017/05/18/react-setting/","link":"","permalink":"http://yoursite.com/2017/05/18/react-setting/","excerpt":"","text":"React.js 개발환경 설정에는 NodeJS를 이용해서 하기 때문에 NodeJS 및 npm이 설치 필요 Node.js를 설치하고 npm install -g npm을 통해 npm 버전을 최신버전으로 업데이트 하는걸 추천. 구버전 npm의 경우(npm ver 3.0.0 미만) nested 구조로 node_modules 폴더를 구성하기 때문에 용량을 많이 잡아먹지만, 신버전 npm의 경우(npm ver 3.0.0 이상) 일반 디렉토리 구조로 생성해서 용량이 많이 줄어든다. 1. Global Package 설치12# npm 으로 babel, webpack, webpack-dev-server 를 설치한다. $ npm install -g babel webpack webpack-dev-server babel - ECMASciprt6를 지원하지 않는 환경에서 ECMAScript6 Syntax를 사용할 수 있게 도와준다. webpack - 모듈 번들러로, 브라우저 위에서 import(require)을 할 수 있고, js 파일들을 하나로 합쳐준다. webpack-dev-server - webpack에서 지원하는 간단한 개발 서버로 별도의 서버 구축없이 웹 서버를 제공해주고, hot-loader를 통해 코드가 수정될 때 마다 자동으로 리로드 되게 해준다. 2. 프로젝트 생성123456# react 개발 환경 세팅할 디렉토리 생성$ mkdir react # 해당 디렉토리로 이동$ cd react# 개발 환경을 저장해 놓을 package.json 생성$ npm init 3. Dependency, Plugin 설치1234# 해당 디렉토리 안에 있는 node_modules 폴더에 react 와 react-dom 설치하고 package.json에 의존 패키지로 해당 모듈을 추가해준다.$ npm install --save react react-dom# babel에서 사용될 플러그인 설치, 개발환경에서만 해당 모듈이 필요한 경우 --save-dev(-D) 옵션을 줘서 설치한다.$ npm install --save-dev babel-core babel-loader babel-preset-react babel-preset-es2015 webpack webpack-dev-server webpack 과 webpack-dev-server를 로컬 모듈로 설치한 이유는 webpack의 -hot 옵션을 사용하고, 커맨드라인 환경에서 webpack-dev-server로 바로 실행하기 위함이다. 4. 디렉토리 구조 이해 및 파일 생성123456789react├── package.json├── public # server publick path│ └── index.html # main page├── src # React.js 프로젝트 루트│ ├── components # 컴포넌트 폴더│ │ └── App.js # App 컴포넌트│ └── index.js # Webpack Entry point└── webpack.config.js # Webpack 설정파일 Webpack Entry point는 webpack 모듈에서 가장 처름으로 읽어들이는 파일이다. 이 파일에서부터 시작해서, 해당 파일에서 import한 다른 모듈들을 불러온다. 5. 컴파일러, 서버 및 로더 설정webpack 설정(webpack.config.js) webpack.config.js -&gt; ECMAScript6를 컴파일 해주고 개발 서버를 열어주는 webpack의 설정파일 12345678910111213141516171819202122232425262728293031323334module.exports = &#123; // entry 부터 시작해서 필요한 모듈을 모두 불러온다. entry: './src/index.js', // 불러온 모듈을 bundle.js 라는 하나의 파일로 합친다. output: &#123; path: __dirname + '/public/', filename: 'bundle.js' &#125;, // webpack-dev-server 설정 // 0.0.0.0(localhost) // 4000번 포트를 이용해 public 폴더 내부의 index.html을 보여준다. devServer: &#123; hot: true, inline: true, host: '0.0.0.0', port: 4000, contentBase: __dirname + '/public/', &#125;, module: &#123; loaders: [ &#123; test: /\\.js$/, // babel-loader 을 사용해서 ES6(es2015), react 문법을 ES5형태로 변환시켜줌 loaders: 'babel-loader', exclude: /node_modules/, query: &#123; cacheDirectory: true, presets: ['es2015', 'react'] &#125; &#125; ] &#125;,&#125;; package.json 설정 package.json의 scripts block을 아래와 같이 수정한다. 1234567// webpack-dev-server 를 // --hot 옵션(코드가 변경되면 실시간으로 reload)과 // --host 옵션(localhost가 아닌 외부 서버에서 dev-server 실행시 필요한 옵션 localhost인 경우 생략)// 으로 실행 한다.\"scripts\" : &#123; \"start\" : \"webpack-dev-server --hot --host 0.0.0.0\"&#125;, 123# 커맨드 라인에 npm start 를 입력하면 # webpack-dev-server --hot --host 0.0.0.0를 입력한 것과 같은 효과$ npm start 6. HTML 및 js 수정public/index.html localhost로 접속하면 보여질 html 파일 123456789101112131415&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;React App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;!--React 프로젝트의 root element--&gt; &lt;div id=\"root\"&gt;&lt;/div&gt; &lt;!--webpack으로 생성된 bundle.js 파일을 연결--&gt; &lt;!--react 라이브러리 및 기타 자바스크립트 파일들이 하나로 합쳐진 파일--&gt; &lt;script src=\"./bundle.js\"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; src/components/App.js React 컴포넌트 123456789101112131415// node_modules 안에 있는 react를 React라는 이름으로 불러옴// var React = require('react'); 와 같음import React from 'react';// App class를 React.Component 로 확장 시킴class App extends React.Component &#123; render()&#123; return ( &lt;h1&gt;Hello React&lt;/h1&gt; ); &#125;&#125;// App 이라는 이름으로 외부에서 접근 할 수 있도록 내보냄// module.export = App; 과 같음export default App; src/index.js App 컴포넌트를 rootElement에 렌더링 1234567import React from 'react';import ReactDOM from 'react-dom';import App from './components/App';const rootElement = document.getElementById('root');// ReactDOM에 있는 render 함수를 이용하여 &lt;App/&gt;을 렌더링ReactDOM.render(&lt;App /&gt;, rootElement); 7. webpack-dev-server 실행 webpack-dev-server에 hot 옵션이 있기 때문에 App.js를 수정하면 새로고침하지 않아도 알아서 새로고침이 된다. 1$ npm start *출처 velopert React.js 강좌 작업환경 설정","categories":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/categories/Javascript/"},{"name":"React.js","slug":"Javascript/React-js","permalink":"http://yoursite.com/categories/Javascript/React-js/"},{"name":"Setting","slug":"Javascript/React-js/Setting","permalink":"http://yoursite.com/categories/Javascript/React-js/Setting/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://yoursite.com/tags/NodeJS/"},{"name":"react.js","slug":"react-js","permalink":"http://yoursite.com/tags/react-js/"},{"name":"javascript","slug":"javascript","permalink":"http://yoursite.com/tags/javascript/"}]},{"title":"VS Code snippet 만들기","slug":"vs-code-snippet","date":"2017-05-08T09:42:33.000Z","updated":"2017-05-12T04:41:28.000Z","comments":true,"path":"2017/05/08/vs-code-snippet/","link":"","permalink":"http://yoursite.com/2017/05/08/vs-code-snippet/","excerpt":"","text":"1. VS code가 실행된 상태에서 cmd + shift + p를 눌러서 명령 팔레트 창을 실행시키고 snippets를 입력한다. 2. 사용자 코드 조각 열기를 선택한 후 snippet을 제작하고 싶은 파일 형식 선택 3. 사용자 코드 조각을 설정 한다. 123456789101112131415&#123; \"CSS Clear fix\": &#123; // snippet을 실행 시킬 명령어 \"prefix\": \"clfix\", // 삽입할 코드 조각 // 여러 줄일 경우, 로 구분해서 작성 \"body\": [ \"content: '';\", \"display: block;\", \"clear: both;\" ], // 어떤 snippet인지 설명 \"description\": \"CSS Clear fix\" &#125;&#125;","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"},{"name":"FDS04","slug":"Web/FDS04","permalink":"http://yoursite.com/categories/Web/FDS04/"},{"name":"VS Code","slug":"Web/FDS04/VS-Code","permalink":"http://yoursite.com/categories/Web/FDS04/VS-Code/"},{"name":"snippet","slug":"Web/FDS04/VS-Code/snippet","permalink":"http://yoursite.com/categories/Web/FDS04/VS-Code/snippet/"}],"tags":[{"name":"vs code","slug":"vs-code","permalink":"http://yoursite.com/tags/vs-code/"},{"name":"snippet","slug":"snippet","permalink":"http://yoursite.com/tags/snippet/"},{"name":"text Editor","slug":"text-Editor","permalink":"http://yoursite.com/tags/text-Editor/"}]},{"title":"github upstream 사용법","slug":"github-upstream","date":"2017-05-08T01:55:57.000Z","updated":"2017-05-12T04:43:52.000Z","comments":true,"path":"2017/05/08/github-upstream/","link":"","permalink":"http://yoursite.com/2017/05/08/github-upstream/","excerpt":"","text":"1.github에 로그인 후 참여하고 싶은 Opensource Repository로 이동한다. 이 포스트에선 Gwang의 github 2. 해당 Repository를 fork한다. 내 Repository에 해당 Opensource Repository가 복사된다. 3. fork해서 생성된 나의 Repository를 clone 한다. 12$ git clone https://github.com/&#123;myID&#125;/FDS04_Summary$ cd FDS04_Summary 4. local에 원본 Repository 저장소 주소 추가 1234# 원격 저장소(remote)를 upstream(저장소 이름)으로 add 하는 명령어 (master)$ git remote add upstream https://github.com/owl423/FDS04_Summary.git# 등록된 원격 저장소를 확인하는 명령어(master)$ git remote -v 5. 원본 저장소와 fork한 내 저장소 Data 동기화 원본 저장소를 fork한 시점의 Data만 저장돼 있기 때문에 fork한 내 저장소를 동기화 시켜줘야 한다. 1234567# upstream remote repository와(원본 원격 저장소)의 master branch를 내 local repository의 master branch 와 동기화 시킨다.# master branch로 동기화 중요!!!!!# master branch가 아닐경우 # $ git checkout master (master)$ git pull upstream master# origin remote repository와(내 원격 저장소)의 master branch를 내 local repository와 동기화 시킨다.(master)$ git push origin master 6. repository의 내용을 변경 할 새 브랜치를 만든다. 내용 변경에는 file 생성, 기존 파일 수정 등 여러가지 의미 수정 1234# day01 이라는 branch를 만들고 해당 branch로 checkout 한다.(master)$ git checkout -b day01# 아래 같이 브랜치 변경 상태에서 파일 생성 및 수정(day01)$ 7. 파일을 수정하고 난 후 origin remote repository(내 원격 저장소)에 올린다.123(day01)$ git add .(day01)$ git commit -m \"1일차 공부한 내용 정리\"(day01)$ git push origin day01 8. 나의 github repository에서 New pull request 버튼을 누른다. 9. fork한 원본 repository의 master branch 와 내 repository의 브랜치를 설정해서 바뀐 내용을 비교할 수 있다. 원본 repository의 master branch 와base fork: owl423/FDS04_Summary(원본 repository) base: master내 repository의 day2 branch 를 비교head fork: demonic0423/FDS04_Summary(내 repository) compare: day2 10. pull reqeust 생성하기 title은 commit 메시지로 저장되는 영역이고write는 해당 commit에 대한 자세한 설명을 의미작성하고 초록색 Create pull request 를 누른다. 처음 pull request 할 경우 이 순서대로 하고 두 번째 부터는 5~10 단계만 하면 된다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"},{"name":"FDS04","slug":"Web/FDS04","permalink":"http://yoursite.com/categories/Web/FDS04/"},{"name":"github","slug":"Web/FDS04/github","permalink":"http://yoursite.com/categories/Web/FDS04/github/"}],"tags":[{"name":"github","slug":"github","permalink":"http://yoursite.com/tags/github/"},{"name":"upstream","slug":"upstream","permalink":"http://yoursite.com/tags/upstream/"},{"name":"FDS04","slug":"FDS04","permalink":"http://yoursite.com/tags/FDS04/"}]},{"title":"Mac OS X에 Node 설치하기","slug":"set-nvm-instruction","date":"2017-05-04T11:01:56.000Z","updated":"2017-05-18T08:22:26.000Z","comments":true,"path":"2017/05/04/set-nvm-instruction/","link":"","permalink":"http://yoursite.com/2017/05/04/set-nvm-instruction/","excerpt":"","text":"nvm 이란? nvm은 Node Version Manager의 약자로 node.js의 버전을 관리해준다. nvm의 필요성 node.js의 하위 버전에 맞춰 개발된 어플리케이션을 실행 할 때 현재 버전에서 하위버전으로 Downgrade 하는 방법은 node.js를삭제하고 다시 설치하는 방법 뿐이지만, nvm을 사용할 경우 nvm use {version} 을 통해 쉽게 버전을 바꿀 수 있다. node.js의 신버전이 안정성이 떨어져서 아직 테스트가 필요 할 때도 유용하게 사용 가능하다. 설치 방법1234# 다운 받는 명령어$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash# 실행 시키는 명령어$ source /Users/$USER/.nvm/nvm.sh source 명령어를 통해 설치한 nvm을 실행 시킬 수 있지만, 매번 터미널을 켤 때 마다 해야한다.터미널이 켜질 때 마다 자동으로 실행 시키기 위해서 ~/.bash_profile에 아래와 같이 추가한다. 1$ echo \\source /Users/$USER/.nvm/nvm.sh &gt;&gt; ~/.bash_profile .bash_profile은 bash이 열릴 때 마다 실행되는 파일이기 때문에 터미널 실행시 항상 nvm을 사용할 수 있게 된다. nvm 명령어현재 실행중인 nvm 버전 확인1$ nvm version 설치 가능한 Node 버전 탐색1$ nvm ls-remote 새로운 Node 버전 설치12# ex) nvm install 6.9.4$ nvm install &#123;version&#125; 설치된 Node 버전 보기1$ nvm ls 사용할 Node 버전 설정12# ex) nvm use 6.9.4$ nvm use &#123;version&#125; 설치된 Node 버전 제거1$ nvm uninstall &#123;version&#125;","categories":[{"name":"Mac OS X","slug":"Mac-OS-X","permalink":"http://yoursite.com/categories/Mac-OS-X/"},{"name":"Setting","slug":"Mac-OS-X/Setting","permalink":"http://yoursite.com/categories/Mac-OS-X/Setting/"},{"name":"nvm","slug":"Mac-OS-X/Setting/nvm","permalink":"http://yoursite.com/categories/Mac-OS-X/Setting/nvm/"}],"tags":[{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://yoursite.com/tags/NodeJS/"},{"name":"nvm","slug":"nvm","permalink":"http://yoursite.com/tags/nvm/"}]},{"title":"Hexo Theme Setting","slug":"hexo-theme","date":"2017-05-04T10:40:22.000Z","updated":"2017-05-12T04:41:10.000Z","comments":true,"path":"2017/05/04/hexo-theme/","link":"","permalink":"http://yoursite.com/2017/05/04/hexo-theme/","excerpt":"","text":"Hueman Theme로 변경하기 블로그의 root 폴더에서 아래 명령을 실행시킨다. 123# 아래 명령어는 github의 해당 theme repo주소에서 다운받고 # 블로그 내부에 있는 themes 라는 폴더에 hueman이라는 폴더를 생성한다.$ git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 블로그의 root 폴더에 있는 _config.yml에서 환경설정을 한다. 1234# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: hueman blog/themes/hueman 폴더에 있는 _config.yml.example파일의 이름을 _config.yml로 수정한다. 현재 블로그의 themes/hueman/_config.yml 파일 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071# Menusmenu: Home: / # Delete this row if you don't want categories in your header nav bar Categories: About: /# Customizecustomize: logo: width: 165 height: 60 url: images/logo-header.png theme_color: '#206bde' highlight: monokai-sublime #source/css/_highlight 폴더에 설정할 수 있는 값 확인 가능 sidebar: right # sidebar position, options: left, right thumbnail: false # enable posts thumbnail, options: true, false favicon: # path to favicon social_links: # for more icons, please see http://fontawesome.io/icons/#brand # twitter: / # facebook: / # google-plus: / github: https://github.com/owl423 # weibo: / # rss: /# Widgets# 위젯 설정widgets: - recent_posts - category - archive - tagcloud - links# Search# 검색기능 옵션search: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false# Comment# 댓글기능 모듈comment: disqus: hexo-theme-hueman # enter disqus shortname here duoshuo: # enter duoshuo shortname here youyan: # enter youyan uid here facebook: # enter true to enable isso: # enter the domain name of your own comment isso server eg. comments.example.com# Shareshare: default # options: jiathis, bdshare, addtoany, default# Pluginsplugins: lightgallery: true # options: true, false justifiedgallery: true # options: true, false google_analytics: # enter the tracking ID for your Google Analytics baidu_analytics: # enter Baidu Analytics hash key mathjax: false # options: true, false# Miscellaneousmiscellaneous: open_graph: # see http://ogp.me fb_app_id: fb_admins: twitter_id: google_plus: links: Hexo: http://hexo.io","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"},{"name":"Hexo","slug":"Web/Hexo","permalink":"http://yoursite.com/categories/Web/Hexo/"},{"name":"Theme","slug":"Web/Hexo/Theme","permalink":"http://yoursite.com/categories/Web/Hexo/Theme/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Hexo Theme","slug":"Hexo-Theme","permalink":"http://yoursite.com/tags/Hexo-Theme/"},{"name":"Hexo Hueman","slug":"Hexo-Hueman","permalink":"http://yoursite.com/tags/Hexo-Hueman/"}]},{"title":"Hexo Usage","slug":"hexo-usage","date":"2017-05-03T14:44:19.000Z","updated":"2017-05-12T04:41:20.000Z","comments":true,"path":"2017/05/03/hexo-usage/","link":"","permalink":"http://yoursite.com/2017/05/03/hexo-usage/","excerpt":"","text":"Hexo에서 Post만들기 1blog $ hexo new [layout] &lt;title&gt; Hexo에는 세가지 layout이 있다.post - source/_posts 위치에 저장, .md파일 형태draft - source/_drafts 위치에 저장, .md파일 형태, post의 내용이 완성되지 않아서 사이트에 올리고 싶지 않을 때 임시저장 비슷한 기능page - source 위치에 저장 Front-matter 게시물에 대한 환경 설정을 하는 영역생성된 포스트의 최상단에 작성돼 있다. title - 게시물의 제목 date - 게시물을 만든 시간 tags - 게시물에 관련된 태그 categories - 게시물 분류, 상위에 있는 분류가 대분류가 된다. 12345678910&lt;!--현재 게시물의 Front-matter--&gt;title: Hexo Usagedate: 2017-05-03 23:44:19tags: - Hexo - Hexo Usagecategories: - Web - Hexo - Usage Hexo 환경 설정(_config.yml) _config.yml이란?Hexo 블로그의 기본 설정을 세팅하는 파일 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# 현재 블로그의 _comfig.yml# Sitetitle: Gwang's blog # Hexo 블로그의 제목 탭의 이름subtitle: Front-end Developer Gwang's Blog # Hexo 블로그의 부제목 테마별로 위치가 상이함description: # Hexo 블로그에 대한 설명author: gwang # Hexo 블로그 관리자language: en # Hexo 블로그 기본세팅의 언어설정timezone:# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://yoursite.comroot: /permalink: :year/:month/:day/:title/permalink_defaults:# Directorysource_dir: sourcepublic_dir: publictag_dir: tagsarchive_dir: archivescategory_dir: categoriescode_dir: downloads/codei18n_dir: :langskip_render:# Writingnew_post_name: :title.md # File name of new postsdefault_layout: posttitlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0render_drafts: falsepost_asset_folder: falserelative_link: falsefuture: truehighlight: enable: true line_number: true auto_detect: true tab_replace:# Category &amp; Tagdefault_category: uncategorizedcategory_map:tag_map:# Date / Time format ## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss# Pagination## Set per_page to 0 to disable paginationper_page: 10pagination_dir: page# 테마를 바꾸고 싶을 경우 변경해야함# Extensions## Plugins: http://hexo.io/plugins/## Themes: http://hexo.io/themes/theme: hueman # 기본은 landscape 정적 파일 생성하기 서버에 배포하기 전에 정적파일을 생성해야 한다. 1234# public 폴더가 생성된다.$ hexo generate# 파일이 변경될 경우 바로바로 적용시키는 명령어 $ hexo generate --watch Github에 배포하기 hexo-developer-git 모듈이 있어야 배포가 가능하기 때문에 설치한다 1$ npm install --save hexo-developer-git Github에 배포하기 위해 _config.yml파일에서 배포 환경 설정을 해준다. 1234567# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: git # type은 github이 아니고 git이다. # https://아이디.github.io 의 주소를 사용한다면 아래와 같이 해당 repo의 주소를 연결 master branch 설정 repo: https://github.com/owl423/owl423.github.io.git branch: master # 다른 repo라면 해당 repo의 branch 를 gh-pages로 한다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"},{"name":"Hexo","slug":"Web/Hexo","permalink":"http://yoursite.com/categories/Web/Hexo/"},{"name":"Usage","slug":"Web/Hexo/Usage","permalink":"http://yoursite.com/categories/Web/Hexo/Usage/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Hexo Usage","slug":"Hexo-Usage","permalink":"http://yoursite.com/tags/Hexo-Usage/"}]},{"title":"Hexo SetUp","slug":"hexo-setting","date":"2017-05-03T05:28:37.000Z","updated":"2017-05-18T08:22:11.000Z","comments":true,"path":"2017/05/03/hexo-setting/","link":"","permalink":"http://yoursite.com/2017/05/03/hexo-setting/","excerpt":"","text":"1. Node.js가 설치된 상태의 터미널에서 npm i -g hexo-cli 입력12# npm 을 이용해 hexo-cli 설치$ npm i -g hexo-cli 2. hexo init blog 입력123456# hexo init 만 실행하면 현재 디렉토리에서 초기 설정파일 생성# 아래는 blog 라는 이름의 폴더를 생성해서 그 안에 Hexo 블로그를 위한 초기 설정파일들 생성$ hexo init blog...# 마지막에 아래와 같은 문구가 나오면 Hexo 블로그 초기 설정파일 생성 성공INFO Start blogging with Hexo! 3. hexo를 사용하기 위한 node_modules 설치1234567891011121314151617181920212223242526# hexo init 으로 현재 디렉토리에서 설정 파일을 생성했다면 현재 위치에서 npm install 을 실행한다.# 아래는 blog 라는 이름의 폴더를 생성했을 경우 blog 폴더로 디렉토리 이동$ cd blog# 파일의 내용을 보여주는 cat 명령어로 package.json의 내용 확인blog $ cat package.json&#123; \"name\": \"hexo-site\", \"version\": \"0.0.0\", \"private\": true, \"hexo\": &#123; \"version\": \"\" &#125;, \"dependencies\": &#123; \"hexo\": \"^3.2.0\", \"hexo-generator-archive\": \"^0.1.4\", \"hexo-generator-category\": \"^0.1.3\", \"hexo-generator-index\": \"^0.2.0\", \"hexo-generator-tag\": \"^0.2.0\", \"hexo-renderer-ejs\": \"^0.2.0\", \"hexo-renderer-stylus\": \"^0.3.1\", \"hexo-renderer-marked\": \"^0.2.10\", \"hexo-server\": \"^0.2.0\" &#125;&#125;# npm install 으로 package.json에 있는 \"dependencies\"의 값에 저장돼 있는 모듈들을 설치blog $ npm install 4. hexo가 제대로 설치 됐는지 확인123456# hexo server 명령어 실행blog $ hexo serverINFO Start processingINFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.# 위와 같이 나온다면 성공# 브라우저 주소창에 http://0.0.0.0:4000/ 를 입력해서 hexo 블로그가 생성된걸 확인 할 수 있다.","categories":[{"name":"Web","slug":"Web","permalink":"http://yoursite.com/categories/Web/"},{"name":"Hexo","slug":"Web/Hexo","permalink":"http://yoursite.com/categories/Web/Hexo/"},{"name":"SetUp","slug":"Web/Hexo/SetUp","permalink":"http://yoursite.com/categories/Web/Hexo/SetUp/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"},{"name":"Hexo SetUp","slug":"Hexo-SetUp","permalink":"http://yoursite.com/tags/Hexo-SetUp/"},{"name":"npm","slug":"npm","permalink":"http://yoursite.com/tags/npm/"},{"name":"NodeJS","slug":"NodeJS","permalink":"http://yoursite.com/tags/NodeJS/"}]},{"title":"MAC OS X Tree 명령어 설치하기","slug":"Set-Tree-Instruction","date":"2017-05-02T15:32:29.000Z","updated":"2017-05-03T14:54:44.000Z","comments":true,"path":"2017/05/03/Set-Tree-Instruction/","link":"","permalink":"http://yoursite.com/2017/05/03/Set-Tree-Instruction/","excerpt":"","text":"1. Homebrew 설치 (아래 코드 터미널에 복사 붙여넣기) 1$ /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Homebrew는 Mac OS 용 패키지 관리자 2. 터미널에 brew 를 입력하여 설치 확인 12345678910111213141516171819202122232425$ brewExample usage: brew search [TEXT|/REGEX/] brew (info|home|options) [FORMULA...] brew install FORMULA... brew update brew upgrade [FORMULA...] brew uninstall FORMULA... brew list [FORMULA...]Troubleshooting: brew config brew doctor brew install -vd FORMULADevelopers: brew create [URL [--no-fetch]] brew edit [FORMULA...] http://docs.brew.sh/Formula-Cookbook.htmlFurther help: man brew brew help [COMMAND] brew home # 설치 성공시 위와 같은 내용이 나옴 3. 터미널에 brew install tree를 입력하여 설치 123456$ brew install tree==&gt; Downloading https://homebrew.bintray.com/bottles/tree-1.7.0.sierra.bottle.1.######################################################################## 100.0%==&gt; Pouring tree-1.7.0.sierra.bottle.1.tar.gz🍺 /usr/local/Cellar/tree/1.7.0: 7 files, 113.3KB# 설치 성공시 위와 같은 내용이 나옴 4. 터미널에 tree 를 쳐서 디렉토리 tree구조를 확인 할 수 있음 123456789$ tree.├── hexo.md└── tree?\\204\\206?\\205??\\206??\\204\\205?\\205??\\206??\\204\\213?\\205?.md# 한글 파일의 경우 깨져서 나올수 있음 그럴 땐 -N 옵션을 주면 정상 출력$ tree -N.├── hexo.md└── tree명령어.md","categories":[{"name":"Mac OS X","slug":"Mac-OS-X","permalink":"http://yoursite.com/categories/Mac-OS-X/"},{"name":"Setting","slug":"Mac-OS-X/Setting","permalink":"http://yoursite.com/categories/Mac-OS-X/Setting/"},{"name":"Tree instruction","slug":"Mac-OS-X/Setting/Tree-instruction","permalink":"http://yoursite.com/categories/Mac-OS-X/Setting/Tree-instruction/"}],"tags":[{"name":"tree","slug":"tree","permalink":"http://yoursite.com/tags/tree/"},{"name":"Homebrew","slug":"Homebrew","permalink":"http://yoursite.com/tags/Homebrew/"}]}]}